FUNCTION_BLOCK FbStpForPD //Аналоговый ПД- регулятор превращаем в дискретный.

//           DbStpForPD
//    +----------------------+
//    |      FbStpForPD      |
// ->-|InFromPD       CmdOpen|->-
//   -|TimeOpen      CmdClose|->-
//   -|TimeClose             |
//   -|TimeMin               |
//   -|Smax                  |
//   -|Smin                  |
//   -|SensorOpen            |
//   -|SensorClose           |
//   -|Ts                    |
//   -|Reset                 |
//    +----------------------+

//Атрибуты для STEP7.
TITLE   = 'Аналоговый ПД- регулятор превращаем в дискретный.'
VERSION : '0.1'
AUTHOR  : 'VA'
FAMILY  : 'LIB_PLC'
{//Атрибуты для PCS7.
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'    //CFC: отображение блока маленькое или большое.
}

VAR_INPUT //Входные переменные, сохраняемые.
InFromPD    :REAL := 0.0  ; //Задание скорости с обычного ПД- регулятора -100...+100 [%/c].
TimeOpen    :REAL := 60.0 ; //Время открытия задвижки [c].
TimeClose   :REAL := 50.0 ; //Время закрытия задвижки [c].
TimeMin     :REAL := 0.5  ; //Минимальное время импульса [c].
Smax        :REAL := 10.0 ; //Ограничение внутреннего интегратора положения максимум [%].
Smin        :REAL := -10.0; //Ограничение внутреннего интегратора положения минимум [%].
SensorOpen  :BOOL := FALSE; //Датчик на открытие задвижки 100 [%].
SensorClose :BOOL := FALSE; //Датчик на закрытие задвижки 0 [%].
Ts          :REAL := 0.1  ; //Шаг дискретизации по времени в секундах.
Reset       :BOOL := FALSE; //Сброс при перезагрузке.
END_VAR

VAR_OUTPUT //Выходные переменные, сохраняемые.
CmdOpen  :BOOL := FALSE; //Команда на открытие +.
CmdClose :BOOL := FALSE; //Команда на закрытие -.
END_VAR

VAR //Внутренние переменные, сохраняемые.
S :REAL := 0.0; //Положение клапана интеграл скорости по времени есть путь [%].
END_VAR

VAR_TEMP  //Временные переменные, не сохраняемые.
Vin        :REAL; //Скорость на входе [%/с].
Vopen      :REAL; //Скорость открытия [%/с].
Vclose     :REAL; //Скорость закрытия [%/с].
SopenMin   :REAL; //Минимальная дистанция доступная для перемещения на открытие[%].
ScloseMin  :REAL; //Минимальная дистанция доступная для перемещения на закрытие[%].
END_VAR

//Вычисления основаны на том, что интегрирующий исполнительный механизм работает в пределах 0...100 [%].
Vin := InFromPD; // [%/с].
Vopen  := 100.0 / TimeOpen; // [%/с].
Vclose := 100.0 / TimeClose; // [%/с].
SopenMin  := Vopen  * TimeMin; // [%].
ScloseMin := Vclose * TimeMin; // [%].
S := S + Vin * Ts; // [%].

IF(Reset) THEN
S := 0.0;
END_IF;

//Импульс открытия (положительный).
IF(S >= SopenMin) THEN //RS-Триггер на открытие.
CmdOpen := TRUE;
END_IF;

IF((S <= 0.0) OR SensorOpen) THEN //RS-Триггер на открытие.
CmdOpen := FALSE;
END_IF;

IF(CmdOpen) THEN //Вход положительный итератор отрицательный.
S := S - Vopen * Ts; // [%].
END_IF;

//Импульс закрытия (отрицательный).
IF(S <= (ScloseMin * (-1.0))) THEN //RS-Триггер на закрытие.
CmdClose := TRUE;
END_IF;

IF((S >= 0.0) OR SensorClose) THEN //RS-Триггер на закрытие.
CmdClose := FALSE;
END_IF;

IF(CmdClose) THEN //Вход отрицательный интегратор положительный.
S := S + Vclose * Ts; // [%].
END_IF;

//Амплитудный ограничитель интегратора.
IF(S >= Smax) THEN
S := Smax;
END_IF;

IF(S <= Smin) THEN
S := Smin;
END_IF;

END_FUNCTION_BLOCK

//Описание.
//Данный блок это приставка к обычному аналоговому ПИД- регулятору которая превращает его в регулятор с двумя дискретными выходами.
//Применять данный блок можно на котлах с интегральными исполнительными механизмами.
//Например, если у вас есть мотор редуктор, который управляется двумя пускателями и выходной вал имеет датчик положения и концевики положений 0% и 100%,
//то данный блок в паре с ПИД- регулятором позволит управлять положением этого механизма.
//Вместо датчика положения можно завести датчик температуры или давления и получить соответственно систему стабилизации температуры или давления.
//
//Основная идея данного блока состоит в том, что интегральный исполнительный механизм вместе с регулятором должен иметь передаточную функцию ПИ-регулятора.
//Из чего следует что интегральный исполнительный механизм должен управляться ПД- регулятором и тогда они вместе дадут передаточную функцию ПИ-регулятора.
//Но выход с ПД- регулятора аналоговый а исполнительный механизм дискретный.
//Так как аналоговый выход с ПД- регулятора это по сути задание скорости на интегральный исполнительный механизм, а
//дискретные сигналы это тоже суть задание положительной и отрицательной постоянной скорости,
//то остается вычислить площадь аналоговой кривой который дает ПД- регулятор, и выдать эту площадь в виде эквивалентных по площади дискретных импульсах управления.
//Другими словами можно сказать, что данный блок считает площадь сигнала произвольной формы на входе
//и выдает эквивалентную площадь дискретных сигналов на выходе с учетом его полярности.
//Так же необходимо учесть, что есть минимальное значение импульса, который может отработать исполнительный механизм.
//Еще учесть, что в общем случае, что время открытия и закрытия исполнительного механизма может быть разное.
//
//Изначальной данный блок планировался как самостоятельный ПИ- регулятор с двумя дискретными выходами для интегральных исполнительных механизмов.
//Но во время реализации стало понятно что более оптимально сделать приставке к обычному ПИД- регулятору который должен работать как ПД- регулятор.
//Между ПИД- регулятором и данным блоком на время отладки можно поставить дополнительный амплитудный ограничитель и зону не чувствительности.
//
//Данный блок проектировался ручкой в тетрадке в терминах языка CFC.
//При трансляции на структурированный текст сумматор и триггеры были реализованны не явно.

// Блок схема.
//
//        Сумматор
//          +---+    Интегратор
//          |   |   +----------+
//  Vopen->-|-  |   |          |
//          |   |   |  Z * Ts  |
//    Vin->-|+  |->-| -------- |->-S
//          |   |   |  Z - 1   |
// Vclose->-|+  |   |          |
//          |   |   +----------+
//          +---+
//
// Амплитудный ограничитель
//         Smax
//     +-----------+
//     |           |
//     |       +-- |
//     |      /    |
// S->-|     /     |->-S
//     |    /      |
//     | --+       |
//     |           |
//     +-----------+
//         Smin
//
//                            Триггер на открытие
//                              +-------------+
//                              | FbTriggerRS |
//     +------------+           |             |
// S->-| S >= Smin  |--------->-|S           Q|->-CmdOpen
//     +------------+           |             |
//                              |             |
//     +------------+   +---+   |             |
// S->-|   S <= 0   |->-| 1 |->-|R            |
//     +------------+   |   |   |             |
//                      |   |   +-------------+
//         SensorOpen->-|   |
//                      |   |
//                      +---+
//
//           +--------------+   +---+
// CmdOpen->-| BOOL_TO_REAL |->-| * |->-Vopen
//           +--------------+   |   |
//                              |   |
//           100.0 / TimeOpen->-|   |
//                              |   |
//                              +---+
//
//                            Триггер на закрытие
//                              +-------------+
//                              | FbTriggerRS |
//     +------------+           |             |
// S->-| S <= -Smin |--------->-|S           Q|->-CmdClose
//     +------------+           |             |
//                              |             |
//     +------------+   +---+   |             |
// S->-|   S >= 0   |->-| 1 |->-|R            |
//     +------------+   |   |   |             |
//                      |   |   +-------------+
//        SensorClose->-|   |
//                      |   |
//                      +---+
//
//            +--------------+   +---+
// CmdClose->-| BOOL_TO_REAL |->-| * |->-Vclose
//            +--------------+   |   |
//                               |   |
//           100.0 / TimeClose->-|   |
//                               |   |
//                               +---+

//             <-S->
// <--------|--------|--------|-------->
//       -Smin       0     +Smin
//      CmdClose          CmdOpen

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// License: GNU GPL v2
