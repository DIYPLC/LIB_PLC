FUNCTION_BLOCK FbEdgeNeg //Детектор ниспадающего фронта (среза).

//       DbEdgeNeg
//     +-----------+
//     | FbEdgeNeg |
//  ->-|In      Out|->-
//     +-----------+

//Атрибуты для STEP7.
TITLE   = 'Детектор ниспадающего фронта (среза).'
VERSION : '2.0'
AUTHOR  : 'VA'
FAMILY  : 'LibPlc'
{//Атрибуты для PCS7.
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'  ; //CFC: отображение блока мелнькое или большое.
//Опции компилятора SCL.
GenerateReferenceData := 'y' ; //SCL: Генерировать перекрестные ссылки.
CreateDebugInfo       := 'y' ; //SCL: Генерировать оладочную информацию.
SetOKFlag             := 'y' ; //SCL: ENO = 1
MonitorArrayLimits    := 'y' ; //SCL: Следить за границами массивов.
OptimizeObjectCode    := 'y'   //SCL: Оптимизация объектного кода.
}

VAR_INPUT //Входные переменные, сохраняемые.
In :BOOL := FALSE; //Вход.
END_VAR

VAR_OUTPUT //Выходные переменные, сохраняемые.
Out :BOOL := FALSE; //Выход.
END_VAR

VAR //Внутренние переменные, сохраняемые.
In_previos :BOOL := FALSE; //Предыдущее состояние входа.
END_VAR

//Детектор ниспадающего фронта (среза).
Out := In_previos AND NOT(In);
//Запомнить предыдущее состояние входа.
In_previos := In;

END_FUNCTION_BLOCK

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// License: GNU GPL v2
