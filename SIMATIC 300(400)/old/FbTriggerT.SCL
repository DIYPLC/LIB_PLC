FUNCTION_BLOCK FbTriggerT //T- Триггер.

VAR_INPUT //Входные переменные, сохраняемые.
C :BOOL := FALSE; //Count - счетный вход (по нарастающему фронту).
R :BOOL := FALSE; //Reset - сбросить на ноль.
END_VAR

VAR_OUTPUT //Выходные переменные, сохраняемые.
Q :BOOL := FALSE; //Выход триггера.
END_VAR

VAR //Внутренние переменные, сохраняемые.
CPrevios :BOOL := FALSE; //Предыдущее состояние входа.
END_VAR

VAR_TEMP  //Временные переменные, не сохраняемые.
Edge :BOOL; //Выход с детектора фронта.
S1   :BOOL; //Вход Set встроенного RS триттера.
R1   :BOOL; //Вход Reset встроенного RS триттера.
END_VAR

//Детектор нарастающего фронта.
Edge:= C AND NOT(CPrevios);
CPrevios:=C; //Запомнить предыдущее состояние входа.

//Логика включения триггера.
S1:=Edge AND NOT(Q);

//Логика выключения триггера.
R1:=(Edge AND Q) OR R;

//RS триггер.
Q:=(Q OR S1) AND (NOT(R1));

END_FUNCTION_BLOCK

(*
Т - триггер используется для построения делителей частоты, счетчиков.
Т - триггер делит частоту входного сигнала на 2.
Если после кнопки без фиксации поставить Т – триггер, а к выходу триггера подсоединить лампочку, то лампочкой можно управлять последовательным нажатием кнопки.
*)

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// License: GNU GPL v2
