FUNCTION_BLOCK FbDriverRTC //Блок чтения часов реального времени.

//       DbDriverRTC
//     +-------------+
//     | FbDriverRTC |
//     |         Year|->-
//     |        Month|->-
//     |          Day|->-
//     |         Hour|->-
//     |      Minutes|->-
//     |      Seconds|->-
//     |  Millisecond|->-
//     |      Weekday|->-
//     +-------------+

VAR_OUTPUT //Выходные переменные, сохраняемые.
Year        :INT := 0; //Текущее время- Год 20xx.
Month       :INT := 0; //Текущее время- Месяц 1...12.
Day         :INT := 0; //Текущее время- День 1...31.
Hour        :INT := 0; //Текущее время- Час 0...23.
Minutes     :INT := 0; //Текущее время- Минута 0...59.
Seconds     :INT := 0; //Текущее время- Секунда 0...59.
Millisecond :INT := 0; //Текущее время- Миллисекунды 0...999.
Weekday     :INT := 0; //Текущее время- День недели 1...7.
END_VAR

VAR //Внутренние переменные, сохраняемые.
(*Переменные для часов реального времени*)
DateAndTime:DATE_AND_TIME:=DT#1999-12-31-23:59:59.999; //Дата и время 64бит.
StructDateAndTime AT DateAndTime: STRUCT //Представить 64 бит DATE_AND_TIME как восемь BYTE
ArrayByte:ARRAY[0..7] OF BYTE; //Массив из 8 байт.
//ArrayByte[0] Год в формате BCD.
//ArrayByte[1] Месяц в формате BCD.
//ArrayByte[2] День в формате BCD.
//ArrayByte[3] Час в формате BCD.
//ArrayByte[4] Минута в формате BCD.
//ArrayByte[5] Секунда в формате BCD.
//ArrayByte[6] Милисекунда в формате BCD.
//ArrayByte[7] Милисекунды и день недели в формате BCD.
END_STRUCT;
END_VAR

VAR_TEMP  //Временные переменные, не сохраняемые.
ErrorCode :INT;  //Код ошики SFC должен быть 0.
TmpBYTE   :BYTE; //Временная переменная.
ms_x10    :BYTE; //Временная переменная 1.
ms_x100   :BYTE; //Временная переменная 2.
ms_x1     :BYTE; //Временная переменная 3.
END_VAR

//Чтение RTC.
ErrorCode := SFC1(CDT:=DateAndTime);
IF (ErrorCode = 0) THEN
//Расшифровка BCD формата времени- год.
TmpBYTE := ROR(IN:=(StructDateAndTime.ArrayByte[0] AND 2#1111_0000),N:=4);
Year := 2000 + BYTE_TO_INT(TmpBYTE)*10 + BYTE_TO_INT(StructDateAndTime.ArrayByte[0] AND 2#0000_1111);
//Расшифровка BCD формата времени- месяц.
TmpBYTE := ROR(IN:=(StructDateAndTime.ArrayByte[1] AND 2#1111_0000),N:=4);
Month := BYTE_TO_INT(TmpBYTE)*10 + BYTE_TO_INT(StructDateAndTime.ArrayByte[1] AND 2#0000_1111);
//Расшифровка BCD формата времени- день.
TmpBYTE := ROR(IN:=(StructDateAndTime.ArrayByte[2] AND 2#1111_0000),N:=4);
Day := BYTE_TO_INT(TmpBYTE)*10 + BYTE_TO_INT(StructDateAndTime.ArrayByte[2] AND 2#0000_1111);
//Расшифровка BCD формата времени- час.
TmpBYTE := ROR(IN:=(StructDateAndTime.ArrayByte[3] AND 2#1111_0000),N:=4);
Hour := BYTE_TO_INT(TmpBYTE)*10 + BYTE_TO_INT(StructDateAndTime.ArrayByte[3] AND 2#0000_1111);
//Расшифровка BCD формата времени- минута.
TmpBYTE := ROR(IN:=StructDateAndTime.ArrayByte[4] AND 2#1111_0000,N:=4);
Minutes := BYTE_TO_INT(TmpBYTE)*10 + BYTE_TO_INT(StructDateAndTime.ArrayByte[4] AND 2#0000_1111);
//Расшифровка BCD формата времени- секунда.
TmpBYTE := ROR(IN:=StructDateAndTime.ArrayByte[5] AND 2#1111_0000,N:=4);
Seconds := BYTE_TO_INT(TmpBYTE)*10 + BYTE_TO_INT(StructDateAndTime.ArrayByte[5] AND 2#0000_1111);
//Расшифровка BCD формата времени- миллисекунда.
ms_x10  := StructDateAndTime.ArrayByte[6] AND 2#0000_1111; //ms x10
ms_x100 := ROR(IN:=StructDateAndTime.ArrayByte[6] AND 2#1111_0000,N:=4); //ms x100
ms_x1   := ROR(IN:=StructDateAndTime.ArrayByte[7] AND 2#1111_0000,N:=4); //ms x1
Millisecond := BYTE_TO_INT(ms_x100)*100 + BYTE_TO_INT(ms_x10)*10 + BYTE_TO_INT(ms_x1);
//Расшифровка BCD формата времени- день недели.
Weekday := BYTE_TO_INT(StructDateAndTime.ArrayByte[7] AND 2#0000_1111);
ELSE
Year        := 0;
Month       := 0;
Day         := 0;
Hour        := 0;
Minutes     := 0;
Seconds     := 0;
Millisecond := 0;
Weekday     := 0;
END_IF;

END_FUNCTION_BLOCK

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// License: GNU GPL v2
