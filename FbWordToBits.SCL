FUNCTION_BLOCK "FbWordToBits"
TITLE = 'Преобразование слова в 16 бит.'

{ S7_read_back := 'true' ;
  S7_blockview := 'big'  }

AUTHOR  : VA
FAMILY  : LIB_PLC
VERSION : '2.1'

VAR_INPUT // Входные переменные, сохраняемые.
In :WORD := 0; // Входной сигнал.
END_VAR

VAR_OUTPUT // Выходные переменные, сохраняемые.
Out0  :BOOL := FALSE; // Выходной сигнал бит0.
Out1  :BOOL := FALSE; // Выходной сигнал бит1.
Out2  :BOOL := FALSE; // Выходной сигнал бит2.
Out3  :BOOL := FALSE; // Выходной сигнал бит3.
Out4  :BOOL := FALSE; // Выходной сигнал бит4.
Out5  :BOOL := FALSE; // Выходной сигнал бит5.
Out6  :BOOL := FALSE; // Выходной сигнал бит6.
Out7  :BOOL := FALSE; // Выходной сигнал бит7.
Out8  :BOOL := FALSE; // Выходной сигнал бит8.
Out9  :BOOL := FALSE; // Выходной сигнал бит9.
Out10 :BOOL := FALSE; // Выходной сигнал бит10.
Out11 :BOOL := FALSE; // Выходной сигнал бит11.
Out12 :BOOL := FALSE; // Выходной сигнал бит12.
Out13 :BOOL := FALSE; // Выходной сигнал бит13.
Out14 :BOOL := FALSE; // Выходной сигнал бит14.
Out15 :BOOL := FALSE; // Выходной сигнал бит15.
END_VAR

BEGIN

// Преобразование слова в 16 бит.
//      DbWordToBits
//    +--------------+
//    | FbWordToBits |
// ->-|In        Out0|->-
//    |          Out1|->-
//    |          Out2|->-
//    |          Out3|->-
//    |          Out4|->-
//    |          Out5|->-
//    |          Out6|->-
//    |          Out7|->-
//    |          Out8|->-
//    |          Out9|->-
//    |         Out10|->-
//    |         Out11|->-
//    |         Out12|->-
//    |         Out13|->-
//    |         Out14|->-
//    |         Out15|->-
//    +--------------+

// Логическое условие без оператора if.
Out0:= ((In AND 2#0000000000000001) <> 0);
Out1:= ((In AND 2#0000000000000010) <> 0);
Out2:= ((In AND 2#0000000000000100) <> 0);
Out3:= ((In AND 2#0000000000001000) <> 0);
Out4:= ((In AND 2#0000000000010000) <> 0);
Out5:= ((In AND 2#0000000000100000) <> 0);
Out6:= ((In AND 2#0000000001000000) <> 0);
Out7:= ((In AND 2#0000000010000000) <> 0);
Out8:= ((In AND 2#0000000100000000) <> 0);
Out9:= ((In AND 2#0000001000000000) <> 0);
Out10:=((In AND 2#0000010000000000) <> 0);
Out11:=((In AND 2#0000100000000000) <> 0);
Out12:=((In AND 2#0001000000000000) <> 0);
Out13:=((In AND 2#0010000000000000) <> 0);
Out14:=((In AND 2#0100000000000000) <> 0);
Out15:=((In AND 2#1000000000000000) <> 0);

// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// Date start LIB_PLC: 2014
// License: GNU GPL-2.0-or-later
// https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
// https://www.youtube.com/watch?v=n1F_MfLRlX0
// https://www.youtube.com/@DIY_PLC
// https://github.com/DIYPLC/LIB_PLC
// https://oshwlab.com/diy.plc.314/PLC_HW1_SW1
// https://3dtoday.ru/3d-models/mechanical-parts/body/korpus-na-din-reiku
// https://t.me/DIY_PLC

END_FUNCTION_BLOCK
