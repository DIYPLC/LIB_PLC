FUNCTION_BLOCK FbTask100ms //Задача вызывается каждые 100ms.

//      DbTask100ms
//    +-------------+
//    | FbTask100ms |
// ->-|Ts_ms        |
// ->-|Reset        |
//    +-------------+

//Атрибуты для STEP7.
TITLE   = 'Задача вызывается каждые 100ms.'
VERSION : '2.0'
AUTHOR  : 'VA'
FAMILY  : 'LibPlc'
{//Атрибуты для PCS7.
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'  ; //CFC: отображение блока мелнькое или большое.
//Опции компилятора SCL.
GenerateReferenceData := 'y' ; //SCL: Генерировать перекрестные ссылки.
CreateDebugInfo       := 'y' ; //SCL: Генерировать оладочную информацию.
SetOKFlag             := 'y' ; //SCL: ENO = 1
MonitorArrayLimits    := 'y' ; //SCL: Следить за границами массивов.
OptimizeObjectCode    := 'y'   //SCL: Оптимизация объектного кода.
}

VAR_INPUT //Входные переменные, не сохраняемые.
Ts_ms :DINT := 100  ; //Шаг дискретизации по времени [мс].
Reset :BOOL := FALSE; //Сброс при перезагрузке.
END_VAR

VAR //Внутренние переменные, сохраняемые.
DbPIDcontrol       :FbPIDcontrol;
DbStpForPD         :FbStpForPD;
DbVirtualMotorGear :FbVirtualMotorGear;
END_VAR

VAR_TEMP  //Временные переменные, не сохраняемые.
Ts :REAL; //Шаг дискретизации по времени в секундах.
END_VAR

Ts := DINT_TO_REAL(Ts_ms) * 0.001; //Шаг дискретизации по времени в секундах.

//ПИД-регулятор.
//         DbPIDcontrol
//    +--------------------+
//    |    FbPIDcontrol    |
// ->-|ProcessVariable  Out|->-
//   -|Setpoint            |
//   -|Kp                  |
//   -|Ki                  |
//   -|Kd                  |
//   -|Kdf                 |
//   -|DBmax               |
//   -|DBmin               |
//   -|OutMax              |
//   -|OutMin              |
//   -|Ts                  |
//   -|Manual              |
//   -|ManOn               |
//    +--------------------+

DbPIDcontrol.ProcessVariable := DbVirtualMotorGear.Position; //Измеренное значение регулируемого параметра.
DbPIDcontrol.Setpoint        := 50.0                       ; //Заданное значение регулируемого параметра.
DbPIDcontrol.Kp              := 0.5                        ; //Коэффициент усиления пропорциональный.
DbPIDcontrol.Ki              := 0.0                        ; //Коэффициент усиления интегральный.
DbPIDcontrol.Kd              := 0.0                        ; //Коэффициент усиления дифференциальный.
DbPIDcontrol.Kdf             := 1.0                        ; //Коэффициент фильтрации дифференциальный Kdf=1/Tdf.
DbPIDcontrol.DBmax           :=  1.0                       ; //Зона нечувствительности к ошибке регулирования, максимум.
DbPIDcontrol.DBmin           := -1.0                       ; //Зона нечувствительности к ошибке регулирования, минимум.
DbPIDcontrol.OutMax          := 10.0                       ; //Максимальное значение сигнала управления.
DbPIDcontrol.OutMin          := -10.0                      ; //Минимальное значение сигнала управления.
DbPIDcontrol.Ts              := Ts                         ; //Шаг дискретизации по времени в секундах.
DbPIDcontrol.Manual          := 25.0                       ; //Сигнал управления в ручном режиме работы.
DbPIDcontrol.ManOn           := FALSE                      ; //Включить ручной режим работы регулятора.
DbPIDcontrol()                                             ; //ПИД-регулятор.
//                           := DbPIDcontrol.Out           ; //Сигнал управления на исполнительный механизм.

//Аналоговый ПД- регулятор превращаем в дискретный.
//           DbStpForPD
//    +----------------------+
//    |      FbStpForPD      |
// ->-|InFromPD       CmdOpen|->-
//   -|TimeOpen      CmdClose|->-
//   -|TimeClose             |
//   -|TimeMin               |
//   -|Smax                  |
//   -|Smin                  |
//   -|SensorOpen            |
//   -|SensorClose           |
//   -|Ts                    |
//   -|Reset                 |
//    +----------------------+
DbStpForPD.InFromPD    := DbPIDcontrol.Out              ; //Задание скорости с обычного ПД- регулятора -100...+100 [%/c].
DbStpForPD.TimeOpen    := 60.0                          ; //Время открытия задвижки [c].
DbStpForPD.TimeClose   := 50.0                          ; //Время закрытия задвижки [c].
DbStpForPD.TimeMin     := 0.5                           ; //Минимальное время импульса [c].
DbStpForPD.Smax        := 10.0                          ; //Ограничение внутреннего интегратора положения максимум [%].
DbStpForPD.Smin        := -10.0                         ; //Ограничение внутреннего интегратора положения минимум [%].
DbStpForPD.SensorOpen  := DbVirtualMotorGear.SensorOpen ; //Датчик на открытие задвижки 100 [%].
DbStpForPD.SensorClose := DbVirtualMotorGear.SensorClose; //Датчик на закрытие задвижки 0 [%].
DbStpForPD.Ts          := Ts                            ; //Шаг дискретизации по времени в секундах.
DbStpForPD.Reset       := Reset                         ; //Сброс при перезагрузке.
DbStpForPD()                                            ; //Аналоговый ПД- регулятор превращаем в дискретный.
//                     := DbStpForPD.CmdOpen            ; //Команда на открытие +.
//                     := DbStpForPD.CmdClose           ; //Команда на закрытие -.

//Виртуальный МЭО для отладки шагового регулятора.
//         DbVirtualMotorGear
//    +--------------------------+
//    |    FbVirtualMotorGear    |
// ->-|CmdOpen           Position|->-
// ->-|CmdClose        SensorOpen|-
//   -|TimeOpen       SensorClose|-
//   -|TimeClose                 |
//   -|Ts                        |
//   -|Reset                     |
//    +--------------------------+
DbVirtualMotorGear.CmdOpen   := DbStpForPD.CmdOpen            ; //Команда на открытие +.
DbVirtualMotorGear.CmdClose  := DbStpForPD.CmdClose           ; //Команда на закрытие -.
DbVirtualMotorGear.TimeOpen  := 60.0                          ; //Время необходимое для открытия задвижки [с].
DbVirtualMotorGear.TimeClose := 50.0                          ; //Время необходимое для закрытия задвижки [с].
DbVirtualMotorGear.Ts        := Ts                            ; //Шаг дискретизации по времени в секундах.
DbVirtualMotorGear.Reset     := Reset                         ; //Сброс при перезагрузке.
DbVirtualMotorGear()                                          ; //Виртуальный МЭО для отладки шагового регулятора.
//                           := DbVirtualMotorGear.Position   ; //Положение штока 0...100 [%].
//                           := DbVirtualMotorGear.SensorOpen ; //Датчик на открытие задвижки.
//                           := DbVirtualMotorGear.SensorClose; //Датчик на закрытие задвижки.

END_FUNCTION_BLOCK

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// License: GNU GPL v2
