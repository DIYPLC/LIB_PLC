FUNCTION_BLOCK FbS7con //Обмен данными между двумя ПЛК S7-300(400).
TITLE = 'Обмен данными между двумя ПЛК S7-300(400).'

{//Атрибуты для PCS7.
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'    //CFC: отображение блока маленькое или большое.
}

//Атрибуты для STEP7.
VERSION : '4.4'
AUTHOR  : VA
FAMILY  : LIB_PLC

//-----------------------------------------------------------------------

VAR_INPUT

Cucle_ms   { S7_dynamic := 'true'; S7_link := 'false' } :DINT  := 100 ; //GET,PUT Период обмена данными между ПЛК 0...10 000 мс.
ID         { S7_dynamic := 'true'; S7_link := 'false' } :WORD  := 1   ; //GET,PUT NetPro ID S7 connection.

RxOn       { S7_dynamic := 'true'; S7_link := 'false' } :BOOL  := TRUE; //GET Включить прием данных из удаленного ПЛК.
RxDbNumRem { S7_dynamic := 'true'; S7_link := 'false' } :INT   := 4   ; //GET Номер DB в удаленном ПЛК.
RxDbAdrRem { S7_dynamic := 'true'; S7_link := 'false' } :DWORD := 0   ; //GET Cтартовый адрес байта внутри DB в удаленном ПЛК.
RxDbNumLoc { S7_dynamic := 'true'; S7_link := 'false' } :INT   := 30  ; //GET Номер DB этом ПЛК (FbS7conRx).
RxDbAdrLoc { S7_dynamic := 'true'; S7_link := 'false' } :DWORD := 0   ; //GET Cтартовый адрес байта внутри DB в этом ПЛК.
RxLen      { S7_dynamic := 'true'; S7_link := 'false' } :INT   := 64  ; //GET Количество принимаемых байт в датаблоке.

TxOn       { S7_dynamic := 'true'; S7_link := 'false' } :BOOL  := TRUE; //PUT Включить передачу данных в удаленный ПЛК.
TxDbNumRem { S7_dynamic := 'true'; S7_link := 'false' } :INT   := 3   ; //PUT Номер DB в удаленном ПЛК.
TxDbAdrRem { S7_dynamic := 'true'; S7_link := 'false' } :DWORD := 0   ; //PUT Cтартовый адрес байта внутри DB в удаленном ПЛК.
TxDbNumLoc { S7_dynamic := 'true'; S7_link := 'false' } :INT   := 40  ; //PUT Номер DB этом ПЛК (FbS7conTx).
TxDbAdrLoc { S7_dynamic := 'true'; S7_link := 'false' } :DWORD := 0   ; //PUT Cтартовый адрес байта внутри DB в этом ПЛК.
TxLen      { S7_dynamic := 'true'; S7_link := 'false' } :INT   := 64  ; //PUT Количество передаваемых байт в датаблоке.

END_VAR

//-----------------------------------------------------------------------

VAR_OUTPUT
RxEr { S7_dynamic := 'true' } :BOOL := FALSE; //Ошибка при приеме данных из удаленного ПЛК.
TxEr { S7_dynamic := 'true' } :BOOL := FALSE; //Ошибка при передаче данных в удаленный ПЛК.
END_VAR

//-----------------------------------------------------------------------

VAR
DbTON : TON; //Генератор импульсов задает темп обмена.
DbGET : GET; //SFB14 Принять данные.
DbPUT : PUT; //SFB15 Отправить данные.
PulseGen : BOOL := FALSE; //Генератор импульсов задает темп обмена.
END_VAR

//-----------------------------------------------------------------------

VAR_TEMP
    
GET_ADDR_1 : ANY ; 
GET_ADDR_1_st AT GET_ADDR_1 : STRUCT
b0 : BYTE;
b1 : BYTE;
w2 : INT;
w3 : INT;
d4 : DWORD;
END_STRUCT;

GET_RD_1 : ANY ;
GET_RD_1_st AT GET_RD_1 : STRUCT
b0 : BYTE;
b1 : BYTE;
w2 : INT;
w3 : INT;
d4 : DWORD;
END_STRUCT;

PUT_ADDR_1 : ANY ; 
PUT_ADDR_1_st AT PUT_ADDR_1 : STRUCT
b0 : BYTE;
b1 : BYTE;
w2 : INT;
w3 : INT;
d4 : DWORD;
END_STRUCT;

PUT_SD_1 : ANY ;
PUT_SD_1_st AT PUT_SD_1 : STRUCT
b0 : BYTE;
b1 : BYTE;
w2 : INT;
w3 : INT;
d4 : DWORD;
END_STRUCT;

GET_REQ :BOOL;
PUT_REQ :BOOL;

END_VAR

//-----------------------------------------------------------------------

BEGIN

//VA 11-04-2023
//Вызывать Данный FB из OB1.
//Блок сомместим с CFC PCS7v9.1 но поддерживается не всеми типами CPU/CP.
//NetPro необходимо прогружать отдельно.
//При использовании надо сначала сгенерировать DB для FbS7conTx, FbS7conRx.
//Пример работы с типом ANY:
//https://web.archive.org/web/20220322171539/http://plc4good.org.ua/view_post.php?id=303
//https://github.com/komatic1/SCL_network_communication/blob/main/S7Put.scl
//https://github.com/komatic1/SCL_network_communication/blob/main/S7Get.scl
//
//Три блока работают совместно.
//FbS7con FbS7conTx FbS7conRx

IF (Cucle_ms <= 0) THEN
//Для максимальной скорости обмена убрать SFB4 TON таймер.
PulseGen := NOT(PulseGen);
ELSE
//Генератор импульсов задает темп обмена.
DbTON.IN := NOT(PulseGen);
DbTON.PT := DINT_TO_TIME(Cucle_ms);
DbTON();
PulseGen := DbTON.Q;
END_IF;

//-----------------------------------------------------------------------

//Адрес и размер DB в удаленном ПЛК.
//ADDR_1 := P#DB4.DBX 0.0 BYTE 64;
GET_ADDR_1_st.b0 := B#16#10; //Magic Constant.)
GET_ADDR_1_st.b1 := B#16#2; //Magic Constant.)
GET_ADDR_1_st.w2 := RxLen; //Количество байт.
GET_ADDR_1_st.w3 := RxDbNumRem; //Номер DB.
GET_ADDR_1_st.d4 := SHL(IN := RxDbAdrRem, N := 3) OR DW#16#84000000; //Стартовый адрес внутри DB.

//Адрес и размер DB этом ПЛК (FbS7conRx).
//RD_1 := P#DB30.DBX0.0 BYTE 64;
GET_RD_1_st.b0 := B#16#10; //Magic Constant.)
GET_RD_1_st.b1 := B#16#2; //Magic Constant.)
GET_RD_1_st.w2 := RxLen; //Количество байт.
GET_RD_1_st.w3 := RxDbNumLoc; //Номер DB.
GET_RD_1_st.d4 := SHL(IN := RxDbAdrLoc, N := 3) OR DW#16#84000000; //Стартовый адрес внутри DB.

IF(RxOn) THEN
//SFB14 GET Прием данных из удаленного ПЛК через S7 connection в NetPro.
DbGET(REQ    := GET_REQ 
     ,ID     := ID
     ,ADDR_1 := GET_ADDR_1 //Адрес и размер DB в удаленном ПЛК.
     ,RD_1   := GET_RD_1); //Адрес и размер DB этом ПЛК (FbS7conRx).


//Запрос на прием если статус блока не занято.
GET_REQ := PulseGen AND (DbGET.STATUS <> 25);
END_IF;

//Ошибка при приеме данных.
RxEr := DbGET.ERROR OR NOT(RxOn); 

//-----------------------------------------------------------------------

IF(TxOn) THEN
//Адрес и размер DB в удаленном ПЛК.
//ADDR_1 := P#DB3.DBX 0.0 BYTE 64;
PUT_ADDR_1_st.b0 := B#16#10; //Magic Constant.)
PUT_ADDR_1_st.b1 := B#16#2; //Magic Constant.)
PUT_ADDR_1_st.w2 := TxLen; //Количество байт.
PUT_ADDR_1_st.w3 := TxDbNumRem; //Номер DB.
PUT_ADDR_1_st.d4 := SHL(IN := TxDbAdrRem, N := 3) OR DW#16#84000000; //Стартовый адрес внутри DB.

//Адрес и размер DB этом ПЛК (FbS7conTx).
//SD_1 := P#DB40.DBX0.0 BYTE 64;
PUT_SD_1_st.b0 := B#16#10; //Magic Constant.)
PUT_SD_1_st.b1 := B#16#2; //Magic Constant.)
PUT_SD_1_st.w2 := TxLen; //Количество байт.
PUT_SD_1_st.w3 := TxDbNumLoc; //Номер DB.
PUT_SD_1_st.d4 := SHL(IN := TxDbAdrLoc, N := 3) OR DW#16#84000000; //Стартовый адрес внутри DB.

//SFB15 PUT Передача данных в удаленный ПЛК через S7 connection в NetPro.
DbPUT(REQ    := PUT_REQ 
     ,ID     := ID
     ,ADDR_1 := PUT_ADDR_1 //Адрес и размер DB в удаленном ПЛК.
     ,SD_1   := PUT_SD_1); //Адрес и размер DB этом ПЛК (FbS7conRx).

//Запрос на передачу если статус блока не занято.
PUT_REQ := PulseGen AND (DbPUT.STATUS <> 25);
END_IF;

//Ошибка при передаче данных.
TxEr := DbPUT.ERROR OR NOT(TxOn); 

END_FUNCTION_BLOCK

(*
Пример вызова на ассемблере.

      CALL #DbGET (
           REQ                      := L      0.0,
           ID                       := W#16#1,
           NDR                      := #GET_NDR,
           ERROR                    := #GET_ERROR,
           STATUS                   := #GET_STAUS,
           ADDR_1                   := P#DB4.DBX 0.0 BYTE 64,
           RD_1                     := P#DB30.DBX0.0 BYTE 64);

      CALL #DbPUT (
           REQ                      := L      0.0,
           ID                       := W#16#1,
           DONE                     := #PUT_DONE,
           ERROR                    := #PUT_ERROR,
           STATUS                   := #PUT_STATUS,
           ADDR_1                   := P#DB3.DBX 0.0 BYTE 64,
           SD_1                     := P#DB40.DBX0.0 BYTE 64);
*)

// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// Date start LIB_PLC: 2014
// License: GNU GPL-2.0-or-later
// https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
// https://www.youtube.com/watch?v=n1F_MfLRlX0
// https://www.youtube.com/@DIY_PLC
// https://github.com/DIYPLC/LIB_PLC
// https://oshwlab.com/diy.plc.314/PLC_HW1_SW1
// https://3dtoday.ru/3d-models/mechanical-parts/body/korpus-na-din-reiku
// https://t.me/DIY_PLC
