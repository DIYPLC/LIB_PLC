//БЛОК В РАЗРАБОТКЕ НЕ ИСПОЛЬЗОВАТЬ!!!
FUNCTION_BLOCK FbFilterM //Фильтр медианный.

//       DbFilterM
//    +-------------+
//    |  FbFilterM  |
// ->-|In        Out|->-
//   -|Size         |
//   -|Ts_in        |
//   -|Ts_ms        |
//   -|Reset        |
//    +-------------+

//Атрибуты для STEP7.
TITLE   = 'Фильтр медианный.'
VERSION : '0.9'
AUTHOR  : 'VA'
FAMILY  : 'LibPlc'
{//Атрибуты для PCS7.
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'    //CFC: отображение блока маленькое или большое.
}

VAR_INPUT //Входные переменные, сохраняемые.
In    :REAL := 2.0  ; //Входной сигнал до фильтрации.
Size  :INT  := 10   ; //Размер массива для сортировки (Количество выборок).
Ts_in :DINT := 6000 ; //Время между выборками и сортировками для входа In [мс].
Ts_ms :DINT := 100  ; //Шаг дискретизации по времени [мс].
Reset :BOOL := FALSE; //Сброс при перезагрузке.
END_VAR

VAR_OUTPUT //Выходные переменные, сохраняемые.
Out :REAL := 0.0; //Выходной сигнал (середина отсортированного массива).
END_VAR

VAR //Внутренние переменные, сохраняемые.
TimerTs     :DINT := 0    ; //Таймер для ресемплинга [мс].
FlagRunCode :BOOL := FALSE; //Флаг выполнить программу с шагом дискретизации Ts_in.
Size_prev   :INT  := 0    ; //Предидущее значение соответствующего входного параметра.
Ts_in_prev  :DINT := 0    ; //Предидущее значение соответствующего входного параметра.
i           :INT  := 0    ; //Счетчик цикла.
j           :INT  := 0    ; //Счетчик цикла.
Adr_max     :INT  := 0    ; //Максимальное значение адреса массива.
Old_i       :INT  := 0    ; //Адрес самого старого элемента в массиве.
InputArray  :ARRAY [0..16] OF REAL; //Массив входных значений для сортировки.
TimeArray   :ARRAY [0..16] OF INT ; //Массив времени жизни элемента 0-самый молодой 1-старше 2- еще старше.
END_VAR

VAR_TEMP  //Временные переменные, не сохраняемые.
TempValue :REAL; //Временная переменная для сортировки значений.
TempTime  :INT ; //Временная переменная для сортировки времени жизни элемента.
END_VAR

//****************************************************************************
//Защита от выхода массива за границы.
//Максимальное число должно повторять размер массива.
IF (Size >= 16) THEN
Size := 16;
END_IF;
//Менее 3х элементов не вижу смысла сортировать
IF (Size <= 3) THEN
Size := 3;
END_IF;

Adr_max := Size - 1;

//****************************************************************************
//Ресэмплинг выключен если Ts_ms >= Ts_in
IF (Ts_ms >= Ts_in) THEN
TimerTs := 0;
FlagRunCode := TRUE;
ELSE
  //Ресэмплинг для возможности изменения времени между выборками.
  IF (TimerTs >= Ts_in) THEN
  TimerTs := 0;
  FlagRunCode := TRUE;
  ELSE
  TimerTs := TimerTs + Ts_ms;
  FlagRunCode := FALSE;
  END_IF;
END_IF;

//****************************************************************************
//Инициализация массива.
//При перезапуске ПЛК.
//При изменении настроек фильтра.
IF (Reset OR (Size <> Size_prev) OR (Ts_in <> Ts_in_prev)) THEN
  //Цикл от 0 до Size включительно с шагом +1.
  FOR i := 0 TO Adr_max BY 1 DO
    //Заполняем весь массив значений входным сигналом.
    InputArray[i] := In;
    //Заполняем массив времени жизни элемента.
    TimeArray[i] := i;
  END_FOR;
//После инициализации самый старый элемент вверху массива.
Old_i := Size;
// Массив после инициализации при In = 0.0, Size = 4.
//  InputArray TimeArray  i
// +----------+---------+---+
// |    0.0   |    4    | 4 | <- Old_i
// |    0.0   |    3    | 3 |
// |    0.0   |    2    | 2 |
// |    0.0   |    1    | 1 |
// |    0.0   |    0    | 0 |
// +----------+---------+---+
// Направление работы цикла от 0 до 4.
END_IF;

//----------------------------------------------------------------------------
//Код выполняемый с шагом дискретизации Ts_in.
IF (FlagRunCode) THEN

//----------------------------------------------------------------------------

  FOR i := 0 TO Adr_max BY 1 DO
    //Обновляем массив возраста элементов.    
    IF (TimeArray[i] = Adr_max) THEN
      //Самый старый элемент становится самым новым
      TimeArray[i] := 0;
    ELSE
      //Все остальные стареют на +1.
      TimeArray[i] := TimeArray[i] + 1;
      //Ищем самый старый элемент массива.
      IF (TimeArray[i] = Adr_max) THEN
        //Запоминаем самый старый элемент массива
        //В него потом запишем новое значение входа
        Old_i := i;
      END_IF;
    END_IF;
  END_FOR;

//----------------------------------------------------------------------------

//Записываем новое значение входа в самый стырый элемент массива.
InputArray[Old_i] := In;

//----------------------------------------------------------------------------

//Сортировка по возрастанию массива значений InputArray.
//Массив до сортировки 
//  InputArray TimeArray  i
// +----------+---------+---+
// |    1.0   |    0    | 0 | 
// |    4.0   |    1    | 1 | 
// |    3.0   |    2    | 2 | 
// |    6.0   |    3    | 3 | 
// |    5.0   |    4    | 4 | <- Adr_max <- Old_i
// +----------+---------+---+
//Массив после сортировки 
//  InputArray TimeArray  i
// +----------+---------+---+
// |    1.0   |    0    | 0 | 
// |    3.0   |    2    | 1 | 
// |    4.0   |    1    | 2 | 
// |    5.0   |    4    | 3 | <- Old_i
// |    6.0   |    3    | 4 | <- Adr_max
// +----------+---------+---+
//Пузырьковая сотрировка бессмысленная и беспощадная.
//Думаю при диком желании это можно свернуть до одного цикла тк массив каждый раз оставляем отсортированным.
//https://ru.wikibooks.org/wiki/%D0%AF%D0%B7%D1%8B%D0%BA_%D0%A1%D0%B8_%D0%B2_%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D0%B0%D1%85/%D0%A1%D0%BE%D1%80%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%BA%D0%B0
//У сименса for не такой как на си пришлось переписать на while.
//Ну и индексы массива у сименса на единицу разнятся с си.
  i := 0;
  WHILE (i < Adr_max) DO
  //WHILE (i <= Adr_max - 1) DO
    j := 0;
    WHILE (j < Adr_max - i) DO
    //WHILE (j <= Adr_max - 1) DO
      IF (InputArray[j] > InputArray[j + 1]) THEN
        //Если они идут в неправильном порядке, то меняем их местами.
        TempValue := InputArray[j];
        InputArray[j] := InputArray[j + 1] ;
        InputArray[j + 1] := TempValue;
        //Сортируем второй массив устаревания в соответствии с первым массивом значений.
        TempTime := TimeArray[j];
        TimeArray[j] := TimeArray[j + 1] ;
        TimeArray[j + 1] := TempTime;
      END_IF;
    j := j + 1;
    END_WHILE;
  i := i + 1;
  END_WHILE;

END_IF; //IF (FlagRunCode) THEN
//----------------------------------------------------------------------------

//  InputArray TimeArray  i
// +----------+---------+---+
// |    1.0   |    0    | 0 | 
// |    3.0   |    2    | 1 | 
// |    4.0   |    1    | 2 | <- Out = [Size / 2]
// |    5.0   |    4    | 3 | 
// |    6.0   |    3    | 4 | <- Adr_max
// +----------+---------+---+


//Выход это середина отсортированного массива.
Out := InputArray[Adr_max / 2];

//****************************************************************************

//Запомнить предидущее значение настроек фильтра.
Size_prev  := Size ; //Предидущее значение соответствующего входного параметра.
Ts_in_prev := Ts_in; //Предидущее значение соответствующего входного параметра.

//****************************************************************************
END_FUNCTION_BLOCK

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// License: GNU GPL v2
