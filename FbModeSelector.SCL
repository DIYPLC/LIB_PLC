FUNCTION_BLOCK FbModeSelector //Переключатель режимов работы.
TITLE = 'Переключатель режимов работы.'

//          DbModeSelector
//    +------------------------+
//    |     FbModeSelector     |
// ->-|ButtonStop      LampStop|->-
// ->-|ButtonManual  LampManual|->-
// ->-|ButtonAuto      LampAuto|->-
//   -|Error                   |
//   -|Reset                   |
//    +------------------------+

{//Атрибуты для PCS7.
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'    //CFC: отображение блока маленькое или большое.
}

//Атрибуты для STEP7.
VERSION : '2.1'
AUTHOR  : VA
FAMILY  : LIB_PLC

VAR_INPUT //Входные переменные, сохраняемые.
ButtonStop   :BOOL := FALSE; //Кнопка "Стоп".
ButtonManual :BOOL := FALSE; //Кнопка "Ручной режим".
ButtonAuto   :BOOL := FALSE; //Кнопка "Автоматический режим".
Error        :BOOL := FALSE; //Отсутствие готовности системы к работе.
Reset        :BOOL := FALSE; //Сброс при перезагрузке.
END_VAR

VAR_OUTPUT //Выходные переменные, сохраняемые.
LampStop   :BOOL := FALSE; //Флаг "Активен режим СТОП".
LampManual :BOOL := FALSE; //Флаг "Активен РУЧНОЙ режим".
LampAuto   :BOOL := FALSE; //Флаг "Активен АВТОМАТИЧЕСКИЙ режим.
END_VAR

VAR //Внутренние переменные, сохраняемые.
State1    :INT  := 0; //Локальный граф состояний.
FlagError :BOOL := FALSE; //Флаг запрещенного состояния входов.
END_VAR

CONST //Константы.
STATE_STOP   := 0; //Состояние "СТОП РЕЖИМ".
STATE_MANUAL := 1; //Состояние "РУЧНОЙ РЕЖИМ".
STATE_AUTO   := 2; //Состояние "АВТОМАТИЧЕСКИЙ РЕЖИМ".
END_CONST

//Запрещенное состояние: нажата может быть только одна кнопка.
FlagError:=
((ButtonStop AND ButtonManual AND ButtonAuto) OR
(NOT(ButtonStop) AND ButtonManual AND ButtonAuto) OR
(ButtonStop AND NOT(ButtonManual) AND ButtonAuto) OR
(ButtonStop AND ButtonManual AND NOT(ButtonAuto)) );

//При перезагрузке контроллера режим СТОП.
IF (Reset OR FlagError) THEN
    State1     := STATE_STOP;
    LampStop   := TRUE;
    LampManual := FALSE;
    LampAuto   := FALSE;
ELSE
    //Граф состояний.
    CASE State1 OF

    STATE_STOP://Режим СТОП.
    LampStop   := TRUE;
    LampManual := FALSE;
    LampAuto   := FALSE;
    //Переход СТОП -> РУЧНОЙ.
    IF ButtonManual THEN
    State1     := STATE_MANUAL;
    LampStop   := FALSE;
    LampManual := TRUE;
    LampAuto   := FALSE;
    END_IF;
    //Переход СТОП -> АВТОМАТ.
    IF (ButtonAuto AND NOT(Error)) THEN
    State1     := STATE_AUTO;
    LampStop   := FALSE;
    LampManual := FALSE;
    LampAuto   := TRUE;
    END_IF;

    STATE_MANUAL://Режим РУЧНОЙ.
    LampStop   := FALSE;
    LampManual := TRUE;
    LampAuto   := FALSE;
    //Переход РУЧНОЙ -> СТОП.
    IF ButtonStop THEN
    State1     := 0;
    LampStop   := TRUE;
    LampManual := FALSE;
    LampAuto   := FALSE;
    END_IF;
    //Преход РУЧНОЙ -> АВТОМАТ.
    IF (ButtonAuto AND NOT(Error)) THEN
    State1     := STATE_AUTO;
    LampStop   := FALSE;
    LampManual := FALSE;
    LampAuto   := TRUE;
    END_IF;

    STATE_AUTO://Режим АВТОМАТ.
    LampStop   := FALSE;
    LampManual := FALSE;
    LampAuto   := TRUE;
    //Переход АВТОМАТ -> СТОП.
    IF (ButtonStop OR Error) THEN
    State1     := STATE_STOP;
    LampStop   := TRUE;
    LampManual := FALSE;
    LampAuto   := FALSE;
    END_IF;
    //Переход АВТОМАТ -> РУЧНОЙ.
    IF ButtonManual THEN
    State1     := STATE_MANUAL;
    LampStop   := FALSE;
    LampManual := TRUE;
    LampAuto   := FALSE;
    END_IF;

    ELSE//СТОП при неопределенном состоянии.
    State1 := STATE_STOP;
    END_CASE;

END_IF;//IF (Reset OR FlagError) THEN

END_FUNCTION_BLOCK

// Граф состояний.
//
// Если ошибка Error активна можно работать только в ручном режиме.
// Reset должен срабатывать при перезагрузке или включении питания.
//
//                                  |
//                                 -+-Reset OR FlagError
//                                  |
//                                  V
//                        +-------------------+
//                        | State1 =          |
//            +---------->| STATE_STOP        |-----------+
//            |           | LampStop = 1      |           |
//            |           +-------------------+           |
//            |                |         ^                |
//            |                |         |                |
//            |   ButtonManual-+-       -+-ButtonStop     |
//            |                |         |                |
//            |                V         |                |
//            |           +-------------------+           |
// ButtonStop |           | State1 =          |           | ButtonAuto
//        OR -+-          | STATE_MANUAL      |          -+- AND
//      Error |           | LampManual = 1    |           | NOT(Error)
//            |           +-------------------+           |
//            |                |         ^                |
//            |     ButtonAuto |         |                |
//            |           AND -+-       -+-ButtonManual   |
//            |     NOT(Error) |         |                |
//            |                V         |                |
//            |           +-------------------+           |
//            |           | State1 =          |           |
//            +-----------| STATE_AUTO        |<----------+
//                        | LampAuto = 1      |
//                        +-------------------+

// Пример организации интерфейса пользователя для HMI.
// При нажатии кнопоки AUTO тег ButtonAuto = 1.
// В автоматическом режиме работы тег LampAuto = 1 дает эффект нажатия на кнопку AUTO.
// Кнопки MANUAL, STOP работают аналогично.
// Так как кнопки без фиксации то можно параллельно кнопкам на экране подключать физические кнопки.
//
// +--------------------------------------------------------+
// | MENU: "Errors"                                         |
// +--------------------------------------------------------+
// | 0. No Error (OK).                                      |
// |                                                        |
// |                                                        |
// |                                                        |
// |                                                        |
// |                                                        |
// |                                                        |
// +--------------------------------------------------------+
// | +--------+ +--------+ +--------+ +--------+ +--------+ |
// | | < MENU | |  AUTO  | | MANUAL | |  STOP  | | MENU > | |
// | +--------+ +--------+ +--------+ +--------+ +--------+ |
// +--------------------------------------------------------+

//  +---------+
//  | GNU GPL |
//  +---------+
//  |
//  |
//  .= .-_-. =.
// ((_/)o o(\_))
//  `-'(. .)`-'
//  |/| \_/ |\
//  ( |     | )
//  /"\_____/"\
//  \__)   (__/
// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// Date: 2014 - 2024
// License: GNU GPL-2.0-or-later
// https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
// https://www.youtube.com/watch?v=n1F_MfLRlX0
//
// See also:
// https://www.youtube.com/@DIY_PLC
// https://github.com/DIYPLC
// https://oshwlab.com/diy.plc.314?tab=project&page=1
// https://3dtoday.ru/blogs/diy-plc
// https://t.me/DIY_PLC
