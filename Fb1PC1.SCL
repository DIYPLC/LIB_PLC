FUNCTION_BLOCK Fb1PC1 //ПИД- регулятор давления.
TITLE = '1PC1 ПИД- регулятор давления.'

// Система стабилизации давления жидкости в баке.
// Поддерживаем постоянное давление после насоса с частотных приводом.
//
//                   Db1PC1
//    +---------------------------------+
//    |              Fb1PC1             |
// ->-|ADC_Pressure        DAC_Frequency|->-
//   -|RemoteStartButton         MotorOn|-
//   -|RemoteStopButton      ContactorOn|-
//   -|VoltageOk                   Error|-
//   -|DriveOk                          |
//   -|ContactorOk                      |
//   -|InterlockOn                      |
//   -|GroupStart                       |
//   -|GroupStop                        |
//   -|Ts_ms                            |
//   -|Reset                            |
//    +---------------------------------+
//                    ^
//                    |
//                    v
//    +---------------------------------+
//    |                                 |
//    |            Db1PC1Hmi            |
//    |                                 |
//    |      SCADA / HMI interface      |
//    |                                 |
//    +---------------------------------+

{// Атрибуты для PCS7.
S7_m_c     := 'true'   ; //CFC: Блок может управляться или наблюдаться из OS.
S7_tag     := 'true'   ; //CFC: Блок входит в писок тегов OS. 
S7_read_back := 'true' ; //CFC: Chart>Readback активен для прототипов DB.
S7_blockview := 'big'    //CFC: отображение блока маленькое или большое.
}

// Атрибуты для STEP7.
VERSION : '2.1'
AUTHOR  : VA
FAMILY  : '1PC1'

VAR_INPUT // Входные переменные, сохраняемые.
ADC_Pressure      :WORD := 0    ; //Датчик давления 0...27648[АЦП].
RemoteStartButton :BOOL := FALSE; //Кнопка без фиксации NO "ПУСК" на пульте местного управления.
RemoteStopButton  :BOOL := FALSE; //Кнопка без фиксации NC "СТОП" на пульте местного управления.
VoltageOk         :BOOL := FALSE; //Схема собрана (вводной автомат 380VAC включен).
DriveOk           :BOOL := FALSE; //Частотный привод: Готовность к работе (нет ошибок).
ContactorOk       :BOOL := FALSE; //Контактор включился NO контакт.
InterlockOn       :BOOL := FALSE; //Включена технологическая блокировка регулятора.
GroupStart        :BOOL := FALSE; //Групповой пуск (подать импульс).
GroupStop         :BOOL := FALSE; //Групповой стоп (подать импульс).
Ts_ms             :DINT := 100  ; //Шаг дискретизации по времени [мс].
Reset             :BOOL := FALSE; //Сброс при перезагрузке.
END_VAR

VAR_OUTPUT // Выходные переменные, сохраняемые.
DAC_Frequency :WORD := 0    ; //Частотный привод: Сигнал задания частоты 0...27648[ЦАП].
MotorOn       :BOOL := FALSE; //Частотный привод: Включить привод.
ContactorOn   :BOOL := FALSE; //Включить контактор между частотным приводом и двигателем.
Error         :BOOL := FALSE; //Флаг ошибки.
END_VAR

VAR // Внутренние переменные, сохраняемые.
// Промежуточные переменные для быстрой диагностики.
PV              :REAL := 0.0  ; //Измеренное значение регулируемого параметра [Бар].
SP              :REAL := 0.0  ; //Заданное значение регулируемого параметра [Бар].
MV              :REAL := 0.0  ; //Сигнал управления на исполнительный механизм [Гц].
Ts              :REAL := 0.1  ; //Шаг дискретизации по времени [с].
ModeStop        :BOOL := FALSE; //Сигал текущего режима работы "СТОП".
ModeManual      :BOOL := FALSE; //Сигал текущего режима работы "РУЧНОЙ".
ModeAuto        :BOOL := FALSE; //Сигал текущего режима работы "АВТО".
HmiButtonAuto   :BOOL := FALSE; //Кнопка без фиксации "АВТО"   в окне управления двигателем.
HmiButtonManual :BOOL := FALSE; //Кнопка без фиксации "РУЧНОЙ" в окне управления двигателем.
HmiButtonStop   :BOOL := FALSE; //Кнопка без фиксации "СТОП"   в окне управления двигателем.
ErrorButtonStop :BOOL := FALSE; //Ошибка: Нажата кнопка СТОП на пульте местного управления.
TimerForCW      :DINT := 0    ; //Таймер авто обнуления слова управления.
// Блоки данных подпрограмм в порядке их вызова.
DbWordToBits_CW  :FbWordToBits  ; //Преобразование слова в 16 бит.
DbModeSelector1  :FbModeSelector; //Переключатель режимов работы.
DbBitsToWord_SW  :FbBitsToWord  ; //Преобразование 16 бит в слово.
DbBitsToWord_EW  :FbBitsToWord  ; //Преобразование 16 бит в слово.
DbMotor1         :FbMotor       ; //Двигатель с частотником и контактором.
DbDriverAi420_PV :FbDriverAi420 ; //Драйвер аналогово входа 4...20мА.
DbFilterA_PV     :FbFilterA     ; //Фильтр апериодический.
DbLimit_PV       :FbLimit       ; //Амплитудный ограничитель.
DbLimit_SP       :FbLimit       ; //Амплитудный ограничитель.
DbPIDcontrol1    :FbPIDcontrol  ; //ПИД-регулятор.
DbRamp_MV        :FbRamp        ; //Рампа разгона / торможения.
DbDriverAo420_MV :FbDriverAo420 ; //Драйвер аналогово выхода 4...20мА.
DbAlarm_PV       :FbAlarm       ; //Блок предупреждений.
DbAlarm_MV       :FbAlarm       ; //Блок предупреждений.
// Резервные переменные для правки программы на лету без остановки ПЛК.
ReserveBool0        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool1        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool2        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool3        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool4        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool5        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool6        :BOOL          := FALSE; // Резерв 1 бит.
ReserveBool7        :BOOL          := FALSE; // Резерв 1 бит.
ReserveReal0        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal1        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal2        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal3        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal4        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal5        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal6        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveReal7        :REAL          := 0.0  ; // Резерв 32 бит.
ReserveInt0         :INT           := 0    ; // Резерв 16 бит.
ReserveInt1         :INT           := 0    ; // Резерв 16 бит.
ReserveInt2         :INT           := 0    ; // Резерв 16 бит.
ReserveInt3         :INT           := 0    ; // Резерв 16 бит.
ReserveDint0        :DINT          := 0    ; // Резерв 32 бит.
ReserveDint1        :DINT          := 0    ; // Резерв 32 бит.
ReserveDint2        :DINT          := 0    ; // Резерв 32 бит.
ReserveDint3        :DINT          := 0    ; // Резерв 32 бит.
END_VAR

VAR_TEMP // Внутренние переменные, не сохраняемые.
CmdStop   :BOOL; //Команда перейти в режим "СТОП".
CmdManual :BOOL; //Команда перейти в режим "РУЧНОЙ".
CmdAuto   :BOOL; //Команда перейти в режим "АВТО".
DriveRun  :BOOL; //Сигнал на включение частотного привода.
TempReal1 :REAL; //Временная переменная.
TempReal2 :REAL; //Временная переменная.
END_VAR

// Шаг дискретизации по времени [с].
Ts := DINT_TO_REAL(Ts_ms) * 0.001;

//////////////////////////////////////////////////////////////
//--- Часть программы обрабатывающая дискретные сигналы. ---//
//////////////////////////////////////////////////////////////

// Раскладываем слово управления от SCADA/HMI на 16 бит.
//      DbWordToBits
//    +--------------+
//    | FbWordToBits |
// ->-|In        Out0|->-
//    |          Out1|->-
//    |          Out2|->-
//    |          Out3|->-
//    |          Out4|->-
//    |          Out5|->-
//    |          Out6|->-
//    |          Out7|->-
//    |          Out8|->-
//    |          Out9|->-
//    |         Out10|->-
//    |         Out11|->-
//    |         Out12|->-
//    |         Out13|->-
//    |         Out14|->-
//    |         Out15|->-
//    +--------------+
DbWordToBits_CW.In := "Db1PC1Hmi".CW       ; //Входной сигнал.
DbWordToBits_CW()                          ; //Преобразование слова в 16 бит.
HmiButtonStop      := DbWordToBits_CW.Out0 ; //Выходной сигнал бит0.
HmiButtonManual    := DbWordToBits_CW.Out1 ; //Выходной сигнал бит1.
HmiButtonAuto      := DbWordToBits_CW.Out2 ; //Выходной сигнал бит2.
//                 := DbWordToBits_CW.Out3 ; //Выходной сигнал бит3.
//                 := DbWordToBits_CW.Out4 ; //Выходной сигнал бит4.
//                 := DbWordToBits_CW.Out5 ; //Выходной сигнал бит5.
//                 := DbWordToBits_CW.Out6 ; //Выходной сигнал бит6.
//                 := DbWordToBits_CW.Out7 ; //Выходной сигнал бит7.
//                 := DbWordToBits_CW.Out8 ; //Выходной сигнал бит8.
//                 := DbWordToBits_CW.Out9 ; //Выходной сигнал бит9.
//                 := DbWordToBits_CW.Out10; //Выходной сигнал бит10.
//                 := DbWordToBits_CW.Out11; //Выходной сигнал бит11.
//                 := DbWordToBits_CW.Out12; //Выходной сигнал бит12.
//                 := DbWordToBits_CW.Out13; //Выходной сигнал бит13.
//                 := DbWordToBits_CW.Out14; //Выходной сигнал бит14.
//                 := DbWordToBits_CW.Out15; //Выходной сигнал бит15.

// SCADA включает биты в слове управления, а PLC сбрасывает их.
// Такой протокол взаимодействия проще с точки зрения реализации в WinCC, которая и без скриптов любит тупить.
IF ("Db1PC1Hmi".CW <> 0) THEN
TimerForCW := TimerForCW + Ts_ms;
  // Таймер авто обнуления слова управления через 500 ms.
  IF (TimerForCW >= 500) THEN
  TimerForCW := 0;
  "Db1PC1Hmi".CW := 0;
  END_IF;
END_IF;

// Предупреждение: Нажата кнопка СТОП на пульте местного управления.
ErrorButtonStop := NOT(RemoteStopButton);
// Флаг ошибки.
Error := ErrorButtonStop OR DbDriverAi420_PV.Error OR DbMotor1.ErrorVoltage OR DbMotor1.ErrorDrive OR DbMotor1.ErrorContactor;

// Если есть неисправность датчика то не смотря на это можно работать в ручном режиме.
// В автоматическом режиме с ошибками работать нельзя.
// Команда перейти в режим "СТОП".
CmdStop := HmiButtonStop OR NOT(RemoteStopButton) OR InterlockOn OR GroupStop;
// Команда перейти в режим "РУЧНОЙ".
// В ручном режиме можно работать если активна ошибка датчика.
CmdManual := HmiButtonManual OR (RemoteStartButton AND DbDriverAi420_PV.Error);
// Команда перейти в режим "АВТО". 
CmdAuto := HmiButtonAuto OR (RemoteStartButton AND NOT(Error)) OR (GroupStart AND NOT(Error));

// Селектор режимов работы.
//         DbModeSelector
//    +-----------------------+
//    |    FbModeSelector     |
// ->-|ButtonStop     LampStop|->-
// ->-|ButtonManual LampManual|->-
// ->-|ButtonAuto     LampAuto|->-
//   -|Error                  |
//   -|Reset                  |
//    +-----------------------+
DbModeSelector1.ButtonStop   := CmdStop                   ; //Кнопка "Стоп".
DbModeSelector1.ButtonManual := CmdManual                 ; //Кнопка "Ручной режим".
DbModeSelector1.ButtonAuto   := CmdAuto                   ; //Кнопка "Автоматический режим".
DbModeSelector1.Error        := Error                     ; //Отсутствие готовности системы к работе.
DbModeSelector1.Reset        := Reset                     ; //Сброс при перезагрузке.
DbModeSelector1()                                         ; //Переключатель режимов работы.
ModeStop                     := DbModeSelector1.LampStop  ; //Флаг "Активен режим СТОП".
ModeManual                   := DbModeSelector1.LampManual; //Флаг "Активен РУЧНОЙ режим".
ModeAuto                     := DbModeSelector1.LampAuto  ; //Флаг "Активен АВТОМАТИЧЕСКИЙ режим.

// Сборка слова состояния SW из 16 бит для передачи в SCADA/HMI.
// Слово состояния SW влияет на отображение кнопок в SCADA/HMI.
//      DbBitsToWord
//    +--------------+
//    | FbBitsToWord |
// ->-|In0        Out|->-
// ->-|In1           |
// ->-|In2           |
// ->-|In3           |
// ->-|In4           |
// ->-|In5           |
// ->-|In6           |
// ->-|In7           |
// ->-|In8           |
// ->-|In9           |
// ->-|In10          |
// ->-|In11          |
// ->-|In12          |
// ->-|In13          |
// ->-|In14          |
// ->-|In15          |
//    +--------------+
DbBitsToWord_SW.In0  := ModeStop           ; //Входной сигнал бит0.
DbBitsToWord_SW.In1  := ModeManual         ; //Входной сигнал бит1.
DbBitsToWord_SW.In2  := ModeAuto           ; //Входной сигнал бит2.
DbBitsToWord_SW.In3  := FALSE              ; //Входной сигнал бит3.
DbBitsToWord_SW.In4  := FALSE              ; //Входной сигнал бит4.
DbBitsToWord_SW.In5  := FALSE              ; //Входной сигнал бит5.
DbBitsToWord_SW.In6  := FALSE              ; //Входной сигнал бит6.
DbBitsToWord_SW.In7  := FALSE              ; //Входной сигнал бит7.
DbBitsToWord_SW.In8  := FALSE              ; //Входной сигнал бит8.
DbBitsToWord_SW.In9  := FALSE              ; //Входной сигнал бит9.
DbBitsToWord_SW.In10 := FALSE              ; //Входной сигнал бит10.
DbBitsToWord_SW.In11 := FALSE              ; //Входной сигнал бит11.
DbBitsToWord_SW.In12 := FALSE              ; //Входной сигнал бит12.
DbBitsToWord_SW.In13 := FALSE              ; //Входной сигнал бит13.
DbBitsToWord_SW.In14 := FALSE              ; //Входной сигнал бит14.
DbBitsToWord_SW.In14 := FALSE              ; //Входной сигнал бит14.
DbBitsToWord_SW.In15 := FALSE              ; //Входной сигнал бит15.
DbBitsToWord_SW()                          ; //Преобразование 16 бит в слово.
"Db1PC1Hmi".SW       := DbBitsToWord_SW.Out; //Выходной сигнал.

// Сборка слова активных ошибок и аварий EW из 16 бит, для передачи в SCADA/HMI.
// Слово активных ошибок и аварий EW используется для предупреждения оператора.
//      DbBitsToWord
//    +--------------+
//    | FbBitsToWord |
// ->-|In0        Out|->-
// ->-|In1           |
// ->-|In2           |
// ->-|In3           |
// ->-|In4           |
// ->-|In5           |
// ->-|In6           |
// ->-|In7           |
// ->-|In8           |
// ->-|In9           |
// ->-|In10          |
// ->-|In11          |
// ->-|In12          |
// ->-|In13          |
// ->-|In14          |
// ->-|In15          |
//    +--------------+
DbBitsToWord_EW.In0  := DbAlarm_PV.AlarmLo     ; //Входной сигнал бит0.
DbBitsToWord_EW.In1  := DbAlarm_PV.AlarmHi     ; //Входной сигнал бит1.
DbBitsToWord_EW.In2  := DbAlarm_MV.AlarmLo     ; //Входной сигнал бит2.
DbBitsToWord_EW.In3  := DbAlarm_MV.AlarmHi     ; //Входной сигнал бит3.
DbBitsToWord_EW.In4  := DbDriverAi420_PV.Error ; //Входной сигнал бит4.
DbBitsToWord_EW.In5  := DbMotor1.ErrorVoltage  ; //Входной сигнал бит5.
DbBitsToWord_EW.In6  := DbMotor1.ErrorDrive    ; //Входной сигнал бит6.
DbBitsToWord_EW.In7  := DbMotor1.ErrorContactor; //Входной сигнал бит7.
DbBitsToWord_EW.In8  := ErrorButtonStop        ; //Входной сигнал бит8.
DbBitsToWord_EW.In9  := InterlockOn            ; //Входной сигнал бит9.
DbBitsToWord_EW.In10 := GroupStop              ; //Входной сигнал бит10.
DbBitsToWord_EW.In11 := FALSE                  ; //Входной сигнал бит11.
DbBitsToWord_EW.In12 := FALSE                  ; //Входной сигнал бит12.
DbBitsToWord_EW.In13 := FALSE                  ; //Входной сигнал бит13.
DbBitsToWord_EW.In14 := FALSE                  ; //Входной сигнал бит14.
DbBitsToWord_EW.In14 := FALSE                  ; //Входной сигнал бит14.
DbBitsToWord_EW.In15 := FALSE                  ; //Входной сигнал бит15.
DbBitsToWord_EW()                              ; //Преобразование 16 бит в слово.
"Db1PC1Hmi".EW       := DbBitsToWord_EW.Out    ; //Выходной сигнал.

// Двигатель с частотником и контактором.
//                 DbMotor
//    +-------------------------------+
//    |            FbMotor            |
// ->-|MotorRun                MotorOn|->-
//   -|VoltageOk           ContactorOn|-
//   -|DriveOk            ErrorVoltage|-
//   -|ContactorOk          ErrorDrive|-
//   -|TimeMonitoring   ErrorContactor|-
//   -|TimeDelayOn                    |
//   -|TimeDelayOff                   |
//   -|Ts_ms                          |
//   -|Reset                          |
//    +-------------------------------+
// Команда на включение двигателя.
DriveRun := (ModeAuto OR ModeManual) AND NOT(ModeStop);
DbMotor1.MotorRun       := DriveRun               ; //Команда: включить двигатель.
DbMotor1.VoltageOk      := VoltageOk              ; //Схема собрана 380VAC Ok.
DbMotor1.DriveOk        := DriveOk                ; //Обратная связь: нет ошибок на частотном приводе.
DbMotor1.ContactorOk    := ContactorOk            ; //Обратная связь: контактор включился.
DbMotor1.TimeMonitoring := 1000                   ; //Время гарантированного включения контактора [мс].
DbMotor1.TimeDelayOn    := 1000                   ; //Время задержки включения частотника [мс].
DbMotor1.TimeDelayOff   := 5000                   ; //Врямя задержки выключения контактора [мс].
DbMotor1.Ts_ms          := Ts_ms                  ; //Шаг дискретизации по времени [мс].
DbMotor1.Reset          := Reset                  ; //Сброс при перезагрузке.
DbMotor1()                                        ; //Двигатель с частотником и контактором.
MotorOn                 := DbMotor1.MotorOn       ; //Включить двигатель.
ContactorOn             := DbMotor1.ContactorOn   ; //Включить контактор.
//                      := DbMotor1.ErrorVoltage  ; //Схема разобрана нет 380VAC.
//                      := DbMotor1.ErrorDrive    ; //Ошибка частотного привода.
//                      := DbMotor1.ErrorContactor; //Ошибка контактора.

//////////////////////////////////////////////////////////////
//--- Часть программы обрабатывающая аналоговые сигналы. ---//
//////////////////////////////////////////////////////////////

// При сбросе обнуляем интеграторы
// Для задания нулевых начальных условий интегрирования.
// Для устранения проблем с NaN INF по IEEE 754.
IF (Reset) THEN
//Сохранили константы.
TempReal1 := DbPIDcontrol1.Ki;
TempReal2 := DbPIDcontrol1.Kd;
// Обнулили интеграторы.
DbPIDcontrol1.Ki := 0.0;
DbPIDcontrol1.Kd := 0.0;
DbPIDcontrol1();
// Восстановили константы.
DbPIDcontrol1.Ki := TempReal1;
DbPIDcontrol1.Kd := TempReal2;
END_IF;

// Датчик давления 4...20[мА] -> 0...10[Бар].
//            DbDriverAi420
//    +---------------------------+
//    |       FbDriverAi420       |
// ->-|ADC               SensValue|->-
//   -|SensMax             Current|-
//   -|SensMin               Error|-
//   -|ErrValue                   |
//   -|SimValue                   |
//   -|SimOn                      |
//    +---------------------------+
DbDriverAi420_PV.ADC      := ADC_Pressure              ; //АЦП Сигнал от датчика 0...27648.
DbDriverAi420_PV.SensMax  := "Db1PC1Hmi".PressureMaxAi ; //Диаппазон датчика максимум.
DbDriverAi420_PV.SensMin  := "Db1PC1Hmi".PressureMinAi ; //Диаппазон датчика минимум.
DbDriverAi420_PV.ErrValue := 0.0                       ; //Значение для SensorValue при ошибке датчика.
DbDriverAi420_PV.SimValue := "Db1PC1Hmi".SimulationAi  ; //Значение для SensorValue при симуляции.
DbDriverAi420_PV.SimOn    := "Db1PC1Hmi".SimulationAiOn; //Включить симуляцию.
DbDriverAi420_PV()                                     ; //Драйвер аналогово входа 4...20мА.
//                        := DbDriverAi420_PV.SensValue; //Выход в единицах датчика.
//                        := DbDriverAi420_PV.Current  ; //Ток на аналоговом входе 4...20мА.
//                        := DbDriverAi420_PV.Error    ; //Ошибка аналогово входа или датчика.

// Фильтрация сигнала с датчика давления 0...10[Бар].
//      DbFilterA
//    +-----------+
//    | FbFilterA |
// ->-|In      Out|->-
//   -|Tf         |
//   -|Ts         |
//    +-----------+
DbFilterA_PV.In := DbDriverAi420_PV.SensValue    ; //Входной сигнал до фильтрации.
DbFilterA_PV.Tf := "Db1PC1Hmi".PressureFilterTime; //Постоянная времени фильтра [с].
DbFilterA_PV.Ts := Ts                            ; //Шаг дискретизации по времени [с].
DbFilterA_PV()                                   ; //Фильтр апериодический.
//              := DbFilterA_PV.Out              ; //Выходной сигнал после фильтрации.

// Ограничение измеренного значения давления 0...10[Бар].
//       DbLimit
//    +-----------+
//    |  FbLimit  |
// ->-|In      Out|->-
//   -|OutMax     |
//   -|OutMin     |
//    +-----------+
DbLimit_PV.In     := DbFilterA_PV.Out         ; //Вход амплитудного ограничителя.
DbLimit_PV.OutMax := "Db1PC1Hmi".PressureMaxAi; //Максимальное значение выхода.
DbLimit_PV.OutMin := "Db1PC1Hmi".PressureMinAi; //Минимальное значение выхода.
DbLimit_PV()                                  ; //Амплитудный ограничитель.
PV                := DbLimit_PV.Out           ; //Выход амплитудного ограничителя.

// Отображение давления на SCADA/HMI.
"Db1PC1Hmi".PV := PV;

// Ограничение заданного значения давления 0...10[Бар].
//       DbLimit
//    +-----------+
//    |  FbLimit  |
// ->-|In      Out|->-
//   -|OutMax     |
//   -|OutMin     |
//    +-----------+
DbLimit_SP.In     := "Db1PC1Hmi".SP           ; //Вход амплитудного ограничителя.
DbLimit_SP.OutMax := "Db1PC1Hmi".PressureMaxAi; //Максимальное значение выхода.
DbLimit_SP.OutMin := "Db1PC1Hmi".PressureMinAi; //Минимальное значение выхода.
DbLimit_SP()                                  ; //Амплитудный ограничитель.
SP                := DbLimit_SP.Out           ; //Выход амплитудного ограничителя.

// Сигнал управления от SADA/HMI.
MV := "Db1PC1Hmi".MV;

// Стабилизация давления жидкости 0...10[Бар] -> 0...50[Гц].
//         DbPIDcontrol
//    +--------------------+
//    |    FbPIDcontrol    |
// ->-|PV                MV|->-
//   -|SP                  |
//   -|Kp                  |
//   -|Ki                  |
//   -|Kd                  |
//   -|Kdf                 |
//   -|ERMAX               |
//   -|ERMIN               |
//   -|MVMAX               |
//   -|MVMIN               |
//   -|Ts                  |
//   -|Manual              |
//   -|OnMan               |
//    +--------------------+
DbPIDcontrol1.PV     := PV               ; //Измеренное значение регулируемого параметра.
DbPIDcontrol1.SP     := SP               ; //Заданное значение регулируемого параметра.
DbPIDcontrol1.Kp     := "Db1PC1Hmi".Kp   ; //Коэффициент усиления пропорциональный.
DbPIDcontrol1.Ki     := "Db1PC1Hmi".Ki   ; //Коэффициент усиления интегральный.
DbPIDcontrol1.Kd     := "Db1PC1Hmi".Kd   ; //Коэффициент усиления дифференциальный.
DbPIDcontrol1.Kdf    := "Db1PC1Hmi".Kdf  ; //Коэффициент фильтрации дифференциальный Kdf=1/Tdf.
DbPIDcontrol1.ERMAX  := "Db1PC1Hmi".ERMAX; //Зона нечувствительности к ошибке регулирования, максимум.
DbPIDcontrol1.ERMIN  := "Db1PC1Hmi".ERMIN; //Зона нечувствительности к ошибке регулирования, минимум.
DbPIDcontrol1.MVMAX  := "Db1PC1Hmi".MVMAX; //Максимальное значение сигнала управления.
DbPIDcontrol1.MVMIN  := "Db1PC1Hmi".MVMIN; //Минимальное значение сигнала управления.
DbPIDcontrol1.Ts     := Ts               ; //Шаг дискретизации по времени в секундах.
DbPIDcontrol1.Manual := MV               ; //Сигнал управления в ручном режиме работы.
DbPIDcontrol1.OnMan  := NOT(ModeAuto)    ; //Включить ручной режим работы регулятора.
DbPIDcontrol1()                          ; //ПИД-регулятор.
//                   := DbPIDcontrol1.MV ; //Сигнал управления на исполнительный механизм.

// Ограничение величины ускорения / замедления привода 0...50[Гц].
//         DbRamp
//    +--------------+
//    |    FbRamp    |
// ->-|In         Out|->-
//   -|Scale         |
//   -|TAcc          |
//   -|TDec          |
//   -|Ts            |
//    +--------------+
DbRamp_MV.In    := DbPIDcontrol1.MV    ; //Входной сигнал.
DbRamp_MV.Scale := 50.0                ; //Диапазон времени разгона и торможения.
DbRamp_MV.TAcc  := "Db1PC1Hmi".RampTAcc; //Время разгона от 0 до Scale [с].
DbRamp_MV.TDec  := "Db1PC1Hmi".RampTDec; //Время торможения от Scale до 0 [c].
DbRamp_MV.Ts    := Ts                  ; //Шаг дискретизации по времени [с].
DbRamp_MV()                            ; //Рампа разгона / торможения.
MV              := DbRamp_MV.Out       ; //Выходной сигнал.

// Сигнал управления отображение на SADA/HMI.
"Db1PC1Hmi".MV := MV;

// Задание частоты на привод 0...50[Гц] 4...20[мА].
//          DbDriverAo420
//    +-----------------------+
//    |     FbDriverAo420     |
// ->-|In                  DAC|->-
//   -|InMax           Current|-
//   -|InMin                  |
//   -|SimValue               |
//   -|SimOn                  |
//    +-----------------------+
DbDriverAo420_MV.In       := MV                        ; //Вход сигнала на исполнительный механизм.
DbDriverAo420_MV.InMax    := "Db1PC1Hmi".MotorMaxAo    ; //Исполнительный механизм максимум.
DbDriverAo420_MV.InMin    := "Db1PC1Hmi".MotorMinAo    ; //Исполнительный механизм минимум.
DbDriverAo420_MV.SimValue := "Db1PC1Hmi".SimulationAo  ; //Значение для исполнительного механизма при симуляции.
DbDriverAo420_MV.SimOn    := "Db1PC1Hmi".SimulationAoOn; //Включить симуляцию.
DbDriverAo420_MV()                                     ; //Драйвер аналогово выхода 4...20мА.
DAC_Frequency             := DbDriverAo420_MV.DAC      ; //ЦАП Сигнал на исполнительный механизм 0...27648.
//                        := DbDriverAo420_MV.Current  ; //Ток на аналоговом выходе 4...20мА.

// Предупреждение о выходе за допустимые пределы измеренного значения.
//          DbAlarm
//    +-----------------+
//    |     FbAlarm     |
// ->-|In        AlarmHi|->-
//   -|LevelHi   AlarmLo|->-
//   -|LevelLo          |
//   -|TimeDelay        |
//   -|Ts_ms            |
//    +-----------------+
DbAlarm_PV.In        := PV                        ; //Входной сигнал.
DbAlarm_PV.LevelHi   := "Db1PC1Hmi".AlarmPV_Hi    ; //Верхняя граница предупреждения.
DbAlarm_PV.LevelLo   := "Db1PC1Hmi".AlarmPV_Lo    ; //Нижняя граница предупреждения.
DbAlarm_PV.TimeDelay := "Db1PC1Hmi".AlarmDelayTime; //Время задержки включения [мс].
DbAlarm_PV.Ts_ms     := Ts_ms                     ; //Шаг дискретизации по времени [мс].
DbAlarm_PV()                                      ; //Блок предупреждений.
//                   := DbAlarm_PV.AlarmHi        ; //Достигнут верхний предел.
//                   := DbAlarm_PV.AlarmLo        ; //Достигнут нижний предел.

// Предупреждение о выходе за допустимые пределы сигнала управления.
//          DbAlarm
//    +-----------------+
//    |     FbAlarm     |
// ->-|In        AlarmHi|->-
//   -|LevelHi   AlarmLo|->-
//   -|LevelLo          |
//   -|TimeDelay        |
//   -|Ts_ms            |
//    +-----------------+
DbAlarm_MV.In        := MV                        ; //Входной сигнал.
DbAlarm_MV.LevelHi   := "Db1PC1Hmi".AlarmMV_Hi    ; //Верхняя граница предупреждения.
DbAlarm_MV.LevelLo   := "Db1PC1Hmi".AlarmMV_Lo    ; //Нижняя граница предупреждения.
DbAlarm_MV.TimeDelay := "Db1PC1Hmi".AlarmDelayTime; //Время задержки включения [мс].
DbAlarm_MV.Ts_ms     := Ts_ms                     ; //Шаг дискретизации по времени [мс].
DbAlarm_MV()                                      ; //Блок предупреждений.
//                   := DbAlarm_MV.AlarmHi        ; //Достигнут верхний предел.
//                   := DbAlarm_MV.AlarmLo        ; //Достигнут нижний предел.

END_FUNCTION_BLOCK

// Наименование технологической позиции согласно ГОСТ 21.404-85.
//
// 1PC1
// ^^^^
// ||||
// |||+-- Номер оборудования в технологическом участке.
// ||+--- ПИД-регулятор (автоматиеская стабилизация).
// |+---- Давление
// +----- Номер технологического участка.

// Дерево вызовов.
//
// OB1.SCL + (OB100.SCL при перезагрузке) //Платформа зависимый уровень.
//   |
//   +-FbTaskCyclic.SCL //Уровень взаимодействия между частями технологического оборудования и I/O.
//     |
//     +-Fb1PC1.SCL + Db1PC1Hmi.SCL //Управление конкреным технологическим оборудованием.
//       |
//       +-FbPIDcontrol.SCL //LIB_PLC библиокека функциональных блоков для ПЛК.

// Измеренное значение с датчика давления.
//
//                                DbDriverAi420                DbScale          DbFilterA          DbLimit                           
//                        +---------------------------+     +-----------+     +-----------+     +-----------+                        
// +----------------+     |       FbDriverAi420       |     |  FbScale  |     | FbFilterA |     |  FbLimit  |     +-----------------+
// | SensorPressure |-->--|ADC             SensorValue|-->--|In      Out|-->--|In      Out|-->--|In      Out|-->--| PV              |
// +----------------+    -|SensorMaxValue      Current|-   -|InMax      |    -|Tf         |    -|OutMax     |     +-----------------+
//                       -|SensorMinValue        Error|-   -|InMin      |    -|Ts         |    -|OutMin     |                        
// +-------+             -|ErrorValue                 |    -|OutMax     |     +-----------+     +-----------+                        
// | MV    |----------->--|SimulationValue            |    -|OutMin     |                                          
// +-------+             -|SimulationOn               |     +-----------+                                          
//                        +---------------------------+                                                            
//
// +-----------------+     +------------------------------+
// | PV              |-->--| Db1PC1Hmi.PV                 |
// +-----------------+     +------------------------------+

// Заданное значение с SCADA/HMI.
//
//                                  DbLimit                    
//                               +-----------+                 
// +-----------------------+     |  FbLimit  |     +----------+
// | Db1PC1Hmi.SP          |-->--|In      Out|-->--| SP       |
// +-----------------------+    -|OutMax     |     +----------+
//                              -|OutMin     |                 
//                               +-----------+                 

// ПИД- регулятор (стабилизация заданного значения давления).
//
// +----------------------------+     +---------------+
// | Db1PC1Hmi.MV               |-->--| MV            |
// +----------------------------+     +---------------+
//
//                                        DbPIDcontrol              DbRamp                  
//                                   +--------------------+     +------------+              
// +--------------------+            |    FbPIDcontrol    |     |   FbRamp   |     +---------------+
// | PV                 |---------->-|PV                MV|-->--|In       Out|-->--| MV            |
// +--------------------+       +-->-|SP                  |    -|TAcc        |     +---------------+
// +----------+                 |   -|Kp                  |    -|TDec        |              
// | SP       |-----------------+   -|Ki                  |    -|Ts          |              
// +----------+                     -|Kd                  |     +------------+              
//                                  -|Kdf                 |                                 
//                                  -|ERMAX               |                                 
// +---------------+                -|ERMIN               |                                 
// | MV            |------------+   -|MVMAX               |                                 
// +---------------+            |   -|MVMIN               |                                 
//                              |   -|Ts                  |                                 
// +----------+     +-----+     +-->-|Manual              |                                 
// | ModeAuto |-->--| NOT |-------->-|OnMan               |                                 
// +----------+     +-----+          +--------------------+                                 
//
// +---------------+     +----------------------------+
// | MV            |-->--| Db1PC1Hmi.MV               |
// +---------------+     +----------------------------+
//

// Сигнал управления на частотный привод.
//
//                             DbDriverAo420                  
//                       +-----------------------+            
// +---------------+     |     FbDriverAo420     |     +----------------+
// | MV            |-->--|In                  DAC|-->--| DriveFrequency |
// +---------------+    -|InMax           Current|-    +----------------+
//                      -|InMin                  |            
//                      -|SimulationValue        |            
//                      -|SimulationOn           |            
//                       +-----------------------+            

// GUI SCADA/HMI
//
// +------------------------------------------------------+---+
// | 1LIRCA1 ПИД- регулятор давления.                     | X |
// +------------------------------------------------------+---+
// | +-------+ +--------------------------------------------+ |
// | |  5.00 | | Заданное значение            0...10[Бар] B | | <- Db1PC1Hmi.SP
// | +-------+ +--------------------------------------------+ |
// | +-------+ +--------------------------------------------+ |
// | |  5.01 | | Измеренное значение          0...10[Бар] G | | <- Db1PC1Hmi.PV
// | +-------+ +--------------------------------------------+ |
// | +-------+ +--------------------------------------------+ |
// | | 37.00 | | Сигнал управления            0...50 [Hz] R | | <- Db1PC1Hmi.MV
// | +-------+ +--------------------------------------------+ |
// | +---------+ +--------+ +------+ +--------+ +-----------+ |
// | | АВТОМАТ | | РУЧНОЙ | | СТОП | | ТРЕНДЫ | | НАСТРОЙКИ | | <- Db1PC1Hmi.CW, Db1PC1Hmi.SW
// | +---------+ +--------+ +------+ +--------+ +-----------+ |
// | Код ошибки: 0 (OK).                                      | <- Db1PC1Hmi.EW
// +----------------------------------------------------------+
//
//                       Db1LIRCA1            
//          +---------------------------------+
//          |            Fb1LIRCA1            |
// Di/Ai ->-|                                 |->- Do/Ao
//          +----------------+----------------+
//                           |
//          +----------------+----------------+
//          |            Db1PC1Hmi            |
//          +----------------+----------------+
// Network                   |
//          +----------------+----------------+
//          |            SCADA/HMI            |
//          +---------------------------------+
//
// Переключатель режимов работы подключается к кнопкам SCADA/HMI и посту местного управления.
//
//                                      DbModeSelector
//                                +------------------------+
//                                |     FbModeSelector     |
// Db1PC1Hmi.CW.HmiButtonStop--->-|ButtonStop      LampStop|->-Db1PC1Hmi.SW.ModeStop
// Db1PC1Hmi.CW.HmiButtonManual->-|ButtonManual  LampManual|->-Db1PC1Hmi.SW.ModeManual
// Db1PC1Hmi.CW.HmiButtonAuto--->-|ButtonAuto      LampAuto|->-Db1PC1Hmi.SW.ModeAuto
//                               -|Error                   |
//                               -|Reset                   |
//                                +------------------------+

// @COPYLEFT ALL WRONGS RESERVED :)
// Author: VA
// Contacts: DIY.PLC.314@gmail.com
// Date start LIB_PLC: 2014
// License: GNU GPL-2.0-or-later
// https://www.gnu.org/licenses/old-licenses/gpl-2.0.html
// https://www.youtube.com/watch?v=n1F_MfLRlX0
// https://www.youtube.com/@DIY_PLC
// https://github.com/DIYPLC/LIB_PLC
// https://oshwlab.com/diy.plc.314/PLC_HW1_SW1
// https://3dtoday.ru/3d-models/mechanical-parts/body/korpus-na-din-reiku
// https://t.me/DIY_PLC
